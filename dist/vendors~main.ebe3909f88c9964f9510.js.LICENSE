/* 0 */

/***/

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 1 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 2 */

/* 3 */

/* 4 */

/* 5 */

/* 6 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 7 */

/* 8 */

// Thank's IE8 for his funny defineProperty

/* 9 */

/* empty */

/* 10 */

// 7.1.13 ToObject(argument)

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 16 */

// eslint-disable-next-line no-useless-call

/* 17 */

// optional / simple context binding

/* 18 */

/* 19 */

// 7.1.4 ToInteger

/* 20 */

/* 21 */

// most Object methods by ES6 should accept primitives

/* 22 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 23 */

/* 24 */

// 7.2.1 RequireObjectCoercible(argument)

/* 25 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 26 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 27 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 28 */

/* 29 */

/* 30 */

/* 31 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 32 */

/* 33 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 34 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 35 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 36 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 37 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 45 */

/* 46 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 47 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 48 */

/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */

// For CommonJS and CommonJS-like environments where a proper `window`

// is present, execute the factory and get jQuery.

// For environments that do not have a `window` with a `document`

// (such as Node.js), expose a factory as module.exports.

// This accentuates the need for the creation of a real `window`.

// e.g. var jQuery = require("jquery")(window);

// See ticket #14549 for more info.

// Pass this if window is not defined yet

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// enough that all such attempts are guarded in a try block.

// Support: Chrome <=57, Firefox <=52

// In some browsers, typeof returns "function" for HTML <object> elements

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// We don't want to classify *any* DOM node as a function.

// Support: Firefox 64+, Edge 18+

// Some browsers don't support the "nonce" property on scripts.

// On the other hand, just using `getAttribute` is not enough as

// the `nonce` attribute is reset to an empty string whenever it

// becomes browsing-context connected.

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// The `node.getAttribute` check was added for the sake of

// `jQuery.globalEval` so that it can fake a nonce-containing node

// via an object.

// Support: Android <=2.3 only (functionish RegExp)

/* global Symbol */

// Defining this global in .eslintrc.json would create a danger of using the global

// unguarded in another place, it seems safer to define global only for this module

// Define a local copy of jQuery

// The jQuery object is actually just the init constructor 'enhanced'

// Need init if jQuery is called (just allow error to be thrown if not included)

// Support: real iOS 8.2 only (not reproducible in simulator)

// `in` check used to prevent JIT error (gh-2145)

// hasOwn isn't used here due to false negatives

// regarding Nodelist length in IE

// The current version of jQuery being used

// The default length of a jQuery object is 0

// Get the Nth element in the matched element set OR

// Get the whole matched element set as a clean array

// Return all the elements in a clean array

// Return just the one element from the set

// Take an array of elements and push it onto the stack

// (returning the new matched element set)

// Build a new jQuery matched element set

// Add the old object onto the stack (as a reference)

// Return the newly-formed element set

// Execute a callback for every element in the matched set.

// For internal use only.

// Behaves like an Array's method, not like a jQuery method.

// Handle a deep copy situation

// Skip the boolean and the target

// Handle case when target is a string or something (possible in deep copy)

// Extend jQuery itself if only one argument is passed

// Only deal with non-null/undefined values

// Extend the base object

// Prevent Object.prototype pollution

// Prevent never-ending loop

// Recurse if we're merging plain objects or arrays

// Ensure proper type for the source value

// Never move original objects, clone them

// Return the modified object

// Unique for each copy of jQuery on the page

// Assume jQuery is ready without the ready module

// Detect obvious negatives

// Use toString instead of jQuery.type to catch host objects

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Evaluates a script in a provided context; falls back to the global one

// if not specified.

// results is for internal usage only

// Support: Android <=4.0 only, PhantomJS 1 only

// push.apply(_, arraylike) throws on ancient WebKit

// Go through the array, only saving the items

// that pass the validator function

// arg is for internal usage only

// Go through the array, translating each of the items to their new values

// Go through every key on the object,

// Flatten any nested arrays

// A global GUID counter for objects

// jQuery.support is not used in Core but other projects attach their

// properties to it so it needs to exist.

// Populate the class2type map

/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */

// Local document vars

// Instance-specific data

// Instance methods

// Use a stripped-down indexOf as it's faster than native

// https://jsperf.com/thor-indexof-vs-for/5

// Regular expressions

// http://www.w3.org/TR/css3-selectors/#whitespace

// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Operator (capture 2)

// "Attribute values must be CSS identifiers [capture 5]

// or strings [capture 3 or capture 4]"

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// For use in libraries implementing .is()

// We use this for POS matching in `select`

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// CSS escapes

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// Replace a hexadecimal escape sequence with the encoded Unicode code point

// Support: IE <=11+

// For values outside the Basic Multilingual Plane (BMP), manually construct a

// surrogate pair

// CSS string/identifier serialization

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// Other potentially-special ASCII characters get backslash-escaped

// Used for iframes

// See setDocument()

// Removing the function wrapper causes a "Permission Denied"

// error in IE

// Optimize for push.apply( _, NodeList )

// Support: Android<4.0

// Detect silently failing push.apply

// eslint-disable-next-line no-unused-expressions

// Leverage slice if possible

// Support: IE<9

// Otherwise append directly

// Can't trust NodeList.length

// nodeType defaults to 9, since context defaults to document

// Return early from calls with invalid selector or context

// Try to shortcut find operations (as opposed to filters) in HTML documents

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// (excepting DocumentFragment context, where the methods don't exist)

// ID selector

// Document context

// Element context

// Support: IE, Opera, Webkit

// TODO: identify versions

// getElementById can match elements by name instead of ID

// Type selector

// Class selector

// Take advantage of querySelectorAll

// Support: IE 8 only

// Exclude object elements

// qSA considers elements outside a scoping root when evaluating child or

// descendant combinators, which is not what we want.

// In such cases, we work around the behavior by prefixing every selector in the

// list with an ID selector referencing the scope context.

// The technique has to be used as well when a leading combinator is used

// as such selectors are not recognized by querySelectorAll.

// Thanks to Andrew Dupont for this technique.

// Expand context for sibling selectors

// We can use :scope instead of the ID hack if the browser

// supports it & if we're not changing the context.

// Capture the context ID, setting it first if necessary

// Prefix every selector in the list

// All others

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Only keep the most recent entries

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */

// Remove from its parent by default

// release memory in IE

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */

// Use IE sourceIndex if available on both nodes

// Check if b follows a

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// Only certain elements can match :enabled or :disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// Check for inherited disabledness on relevant non-disabled elements:

// * listed form-associated elements in a disabled fieldset

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

// * option elements in a disabled optgroup

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

// All such elements have a "form" property.

// Option elements defer to a parent optgroup if present

// Where there is no isDisabled, check manually

/* jshint -W018 */

// Remaining elements are neither :enabled nor :disabled

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */

// Match elements found at the specified indexes

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */

// Expose support vars for convenience

// Add button/input type pseudos

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */

// Support: IE <=8

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// https://bugs.jquery.com/ticket/4833

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */

// Return early if doc is invalid or already selected

// Support: IE 11+, Edge 17 - 18+

// IE/Edge sometimes throw a "Permission denied" error when strict-comparing

// two documents; shallow comparisons work.

// eslint-disable-next-line eqeqeq

// Update global variables

// Support: IE 9 - 11+, Edge 12 - 18+

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Support: IE 11, Edge

// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,

// Safari 4 - 5 only, Opera <=11.6 - 12.x only

// IE/Edge & older browsers don't support the :scope pseudo-class.

// Support: Safari 6.0 only

// Safari 6.0 supports :scope but it's an alias of :root there.

/* Attributes
	---------------------------------------------------------------------- */

// Support: IE<8

// Verify that getAttribute really returns attributes and not properties

// (excepting IE8 booleans)

/* getElement(s)By*
	---------------------------------------------------------------------- */

// Check if getElementsByTagName("*") returns only elements

// Support: IE<10

// Check if getElementById returns elements by name

// The broken getElementById methods don't pick up programmatically-set names,

// so use a roundabout getElementsByName test

// ID filter and find

// Support: IE 6 - 7 only

// getElementById is not reliable as a find shortcut

// Verify the id attribute

// Fall back on getElementsByName

// Tag

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// Filter out possible comments

// Class

/* QSA/matchesSelector
	---------------------------------------------------------------------- */

// QSA and matchesSelector support

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// qSa(:focus) reports false when true (Chrome 21)

// We allow this because of a bug in IE8/9 that throws an error

// whenever `document.activeElement` is accessed on an iframe

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// See https://bugs.jquery.com/ticket/13378

// Build QSA regex

// Regex strategy adopted from Diego Perini

// Select is set to empty string on purpose

// This is to test IE's treatment of not explicitly

// setting a boolean content attribute,

// since its presence should be enough

// https://bugs.jquery.com/ticket/12359

// Support: IE8, Opera 11-12.16

// Nothing should be selected when empty strings follow ^= or $= or *=

// The test attribute must be unknown in Opera but "safe" for WinRT

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// Support: IE8

// Boolean attributes and "value" are not treated correctly

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Support: IE 11+, Edge 15 - 18+

// IE 11/Edge don't find elements on a `[name='']` query in some cases.

// Adding a temporary attribute to the document before the selection works

// around the issue.

// Interestingly, IE 10 & older don't seem to have the issue.

// Webkit/Opera - :checked should return selected option elements

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// IE8 throws error here and will not see later tests

// Support: Safari 8+, iOS 8+

// https://bugs.webkit.org/show_bug.cgi?id=136851

// In-page `selector#id sibling-combinator selector` fails

// Support: Firefox <=3.6 - 5 only

// Old Firefox doesn't throw on a badly-escaped identifier.

// Support: Windows 8 Native Apps

// The type and name attributes are restricted during .innerHTML assignment

// Enforce case-sensitivity of name attribute

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// Support: IE9-11+

// IE's :disabled selector does not pick up the children of disabled fieldsets

// Support: Opera 10 - 11 only

// Opera 10-11 does not throw on post-comma invalid pseudos

// Check to see if it's possible to do matchesSelector

// on a disconnected node (IE 9)

// This should fail with an exception

// Gecko does not error, returns false instead

/* Contains
	---------------------------------------------------------------------- */

// Element contains another

// Purposefully self-exclusive

// As in, an element does not contain itself

/* Sorting
	---------------------------------------------------------------------- */

// Document order sorting

// Flag for duplicate removal

// Sort on method existence if only one input has compareDocumentPosition

// Disconnected nodes

// Calculate position if both inputs belong to the same document

// Otherwise we know they are disconnected

// Choose the first element that is related to our preferred document

// Exit early if the nodes are identical

// Parentless nodes are either documents or disconnected

/* eslint-disable eqeqeq */

/* eslint-enable eqeqeq */

// If the nodes are siblings, we can do a quick check

// Otherwise we need full lists of their ancestors for comparison

// Walk down the tree looking for a discrepancy

// Do a sibling check if the nodes have a common ancestor

// Otherwise nodes in our document sort first

// IE 9's matchesSelector returns false on disconnected nodes

// As well, disconnected nodes are said to be in a document

// fragment in IE 9

// Set document vars if needed

// Don't get fooled by Object.prototype properties (jQuery #13807)

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */

// Unless we *know* we can detect duplicates, assume their presence

// Clear input after sorting to release objects

// See https://github.com/jquery/sizzle/pull/225

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */

// Use textContent for elements

// innerText usage removed for consistency of new lines (jQuery #11153)

// Traverse its children

// Do not include comment or processing instruction nodes

// If no nodeType, this is expected to be an array

// Do not traverse comment nodes

// Can be adjusted by the user

// Move the given value to match[3] whether quoted or unquoted

/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// remember that false/true cast respectively to 0/1

// Accept quoted arguments as-is

// Get excess from tokenize (recursively)

// advance to the next closing parenthesis

// excess is a negative index

// Shortcut for :nth-*(n)

// :(first|last|only)-(child|of-type)

// Reverse direction for :only-* (if we haven't yet done so)

// non-xml :nth-child(...) stores cache data on `parent`

// Seek `elem` from a previously-cached index

// ...in a gzip-friendly way

// Support: IE <9 only

// Defend against cloned attroperties (jQuery gh-1709)

// Fallback to seeking `elem` from the start

// When found, cache indexes on `parent` and break

// xml :nth-child(...)

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// Use previously-cached element index if available

// Use the same loop as above to seek `elem` from the start

// Cache the index of each encountered element

// Incorporate the offset, then check against cycle size

// pseudo-class names are case-insensitive

// http://www.w3.org/TR/selectors/#pseudo-classes

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Remember that setFilters inherits from pseudos

// The user may use createPseudo to indicate that

// arguments are needed to create the filter function

// just as Sizzle does

// But maintain support for old signatures

// Potentially complex pseudos

// Trim the selector passed to compile

// to avoid treating leading and trailing

// spaces as combinators

// Match elements unmatched by `matcher`

// Don't keep the element (issue #299)

// "Whether an element is represented by a :lang() selector

// is based solely on the element's language value

// being equal to the identifier C,

// or beginning with the identifier C immediately followed by "-".

// The matching of C against the element's language value is performed case-insensitively.

// The identifier C does not have to be a valid language name."

// http://www.w3.org/TR/selectors/#lang-pseudo

// lang value must be a valid identifier

// Miscellaneous

// Boolean properties

// In CSS3, :checked should return both checked and selected elements

// Accessing this property makes selected-by-default

// options in Safari work properly

// Contents

// http://www.w3.org/TR/selectors/#empty-pseudo

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

//   but not by others (comment: 8; processing instruction: 7; etc.)

// nodeType < 6 works because attributes (2) do not appear as children

// Element/input types

// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"

// Position-in-collection

// Easy API for creating new setFilters

// Check against closest ancestor/preceding element

// Check against all ancestor/preceding elements

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// Assign to newCache so results back-propagate to previous elements

// A match means we're done; a fail means we have to keep checking

// Reuse newcache so results back-propagate to previous elements

// Get initial elements from seed or context

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// ...intermediate processing is necessary

// ...otherwise use results directly

// Find primary matches

// Apply postFilter

// Un-match failing elements by moving them back to matcherIn

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Restore matcherIn since elem is not yet a final match

// Move matched elements from seed to results to keep them synchronized

// Add elements to results, through postFinder if defined

// The foundational matcher ensures that elements are reachable from top-level context(s)

// Avoid hanging onto element (issue #299)

// Return special upon seeing a positional matcher

// Find the next relative operator (if any) for proper handling

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// Filters

// Comma and first run

// Don't consume trailing commas as valid

// Combinators

// Cast descendant combinators to space

// Return the length of the invalid excess

// if we're just parsing

// Otherwise, throw an error or return tokens

// Cache the tokens

/* Internal Use Only */

// Generate a function of recursive functions that can be used to check each element

// Cache the compiled function

// Save selector and tokenization

// We must always have either seed elements or outermost context

// Use integer dirruns iff this is the outermost matcher

// Add elements passing elementMatchers directly to results

// Support: IE<9, Safari

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Track unmatched elements for set filters

// They will have gone through all possible matchers

// Lengthen the array for every element, matched or not

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// makes the latter nonnegative.

// Apply set filters to unmatched elements

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// no element matchers and no seed.

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// numerically zero.

// Reintegrate element matches to eliminate the need for sorting

// Discard index placeholder values to get only actual matches

// Add matches to results

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Override manipulation of globals by nested matchers

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */

// Try to minimize operations if there is only one selector in the list and no seed

// (the latter of which guarantees us context)

// Reduce context if the leading compound selector is an ID

// Precompiled matchers will still verify ancestry, so step up a level

// Fetch a seed set for right-to-left matching

// If seed is empty or no tokens remain, we can return early

// Compile and execute a filtering function if one is not provided

// Provide `match` to avoid retokenization if we modified the selector above

// One-time assignments

// Sort stability

// Support: Chrome 14-35+

// Always assume duplicates if they aren't passed to the comparison function

// Initialize against the default document

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Detached nodes confoundingly follow *each other*

// Should return 1, but returns 4 (following)

// Prevent attribute/property "interpolation"

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Deprecated

// Implement the identical functionality for filter and not

// Single element

// Arraylike of elements (jQuery, arguments, Array)

// If this is a positional/relative selector, check membership in the returned set

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// Initialize a jQuery object

// A central reference to the root jQuery(document)

// A simple way to check for HTML strings

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Strict HTML recognition (#11290: must start with <)

// Shortcut simple #id case for speed

// Give the init function the jQuery prototype for later instantiation

// HANDLE: $(""), $(null), $(undefined), $(false)

// Method init() accepts an alternate rootjQuery

// so migrate can support jQuery.sub (gh-2101)

// Handle HTML strings

// Match html or make sure no context is specified for #id

// Assume that strings that start and end with <> are HTML and skip the regex check

// HANDLE: $(DOMElement)

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// Option to run scripts is true for back-compat

// Intentionally let the error be thrown if parseHTML is not present

// Properties of context are called as methods if possible

// HANDLE: $(#id)

// HANDLE: $(expr, $(...))

// Inject the element directly into the jQuery object

// Execute immediately if ready is not present

// Initialize central reference

// Methods guaranteed to produce a unique set when starting from a unique set

// Positional selectors never match, since there's no _selection_ context

// Always skip document fragments

// Don't pass non-elements to Sizzle

// Determine the position of an element within the set

// No argument, return index in parent

// Index in selector

// If it receives a jQuery object, the first element is used

// Support: IE 11+

// <object> elements with no `data` attribute has an object

// `contentDocument` with a `null` prototype.

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Treat the template element as a regular one in browsers that

// don't support it.

// Remove duplicates

// Reverse order for parents* and prev-derivatives

// Convert String-formatted options into Object-formatted ones

// Check for promise aspect first to privilege synchronous behavior

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// * false: [ value ].slice( 0 ) => resolve( value )

// * true: [ value ].slice( 1 ) => resolve()

// For Promises/A+, convert exceptions into rejections

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Deferred#then to conditionally suppress rejection.

// Support: Android 4.0 only

// Strict mode functions invoked without .call/.apply get global-object context

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */

// Convert options from String-formatted to Object-formatted if needed

// (we check in cache first)

// Flag to know if list is currently firing

// Last fire value for non-forgettable lists

// Flag to know if list was already fired

// Flag to prevent firing

// Actual callback list

// Queue of execution data for repeatable lists

// Index of currently firing callback (modified by add/remove as needed)

// Fire callbacks

// Enforce single-firing

// Execute callbacks for all pending executions,

// respecting firingIndex overrides and runtime changes

// Run callback and check for early termination

// Jump to end and forget the data so .add doesn't re-fire

// Forget the data if we're done with it

// Clean up if we're done firing for good

// Keep an empty list if we have data for future add calls

// Actual Callbacks object

// Add a callback or a collection of callbacks to the list

// If we have memory from a past run, we should fire after adding

// Inspect recursively

// Remove a callback from the list

// Handle firing indexes

// Check if a given callback is in the list.

// If no argument is given, return whether or not list has callbacks attached.

// Remove all callbacks from the list

// Disable .fire and .add

// Abort any current/pending executions

// Clear all callbacks and values

// Disable .fire

// Also disable .add unless we have memory (since it would have no effect)

// Abort any pending executions

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// To know if the callbacks have already been called at least once

// action, add listener, callbacks,

// ... .then handlers, argument index, [final state]

// Keep pipe for back-compat

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// Support: Promises/A+ section 2.3.3.3.3

// https://promisesaplus.com/#point-59

// Ignore double-resolution attempts

// Support: Promises/A+ section 2.3.1

// https://promisesaplus.com/#point-48

// Support: Promises/A+ sections 2.3.3.1, 3.5

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-75

// Retrieve `then` only once

// Support: Promises/A+ section 2.3.4

// https://promisesaplus.com/#point-64

// Only check objects and functions for thenability

// Handle a returned thenable

// Special processors (notify) just wait for resolution

// ...and disregard older resolution values

// Only substitute handlers pass on context

// and multiple values (non-spec behavior)

// Process the value(s)

// Default process is resolve

// Only normal processors (resolve) catch and reject exceptions

// Support: Promises/A+ section 2.3.3.3.4.1

// https://promisesaplus.com/#point-61

// Ignore post-resolution exceptions

// Support: Promises/A+ section 2.3.3.3.1

// https://promisesaplus.com/#point-57

// Re-resolve promises immediately to dodge false rejection from

// subsequent errors

// Call an optional hook to record the stack, in case of exception

// since it's otherwise lost when execution goes async

// progress_handlers.add( ... )

// fulfilled_handlers.add( ... )

// rejected_handlers.add( ... )

// Get a promise for this deferred

// If obj is provided, the promise aspect is added to the object

// Add list-specific methods

// All done!

// promise.progress = list.add

// promise.done = list.add

// promise.fail = list.add

// Handle state

// state = "resolved" (i.e., fulfilled)

// state = "rejected"

// rejected_callbacks.disable

// fulfilled_callbacks.disable

// rejected_handlers.disable

// fulfilled_handlers.disable

// progress_callbacks.lock

// progress_handlers.lock

// progress_handlers.fire

// fulfilled_handlers.fire

// rejected_handlers.fire

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.resolveWith = list.fireWith

// deferred.rejectWith = list.fireWith

// Make the deferred a promise

// Call given func if any

// Deferred helper

// count of uncompleted subordinates

// count of unprocessed arguments

// subordinate fulfillment data

// the master Deferred

// subordinate callback factory

// Single- and empty arguments are adopted like Promise.resolve

// Multiple arguments are aggregated like Promise.all array elements

// These usually indicate a programmer mistake during development,

// warn about them ASAP rather than swallowing them by default.

// Support: IE 8 - 9 only

// Console exists when dev tools are open, which can happen at any time

// The deferred used on DOM ready

// The ready event handler and self cleanup method

// Catch cases where $(document).ready() is called

// after the browser event has already occurred.

// Support: IE <=9 - 10 only

// Older IE sometimes signals "interactive" too soon

// Is the DOM ready to be used? Set to true once it occurs.

// A counter to track how many items to wait for before

// the ready event fires. See #6781

// Handle when the DOM is ready

// Abort if there are pending holds or we're already ready

// Remember that the DOM is ready

// If a normal DOM Ready event fired, decrement, and wait if need be

// If there are functions bound, to execute

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Use the handy event callback

// A fallback to window.onload, that will always work

// Multifunctional method to get and set values of a collection

// The value/s can optionally be executed if it's a function

// Sets many values

// Sets one value

// Bulk operations run against the entire set

// Gets

// Matches dashed string for camelizing

// Used by camelCase as callback to replace()

// Convert dashed to camelCase; used by the css and data modules

// Support: IE <=9 - 11, Edge 12 - 15

// Microsoft forgot to hump their vendor prefix (#9572)

// Accepts only:

//  - Node

//    - Node.ELEMENT_NODE

//    - Node.DOCUMENT_NODE

//  - Object

//    - Any

// Check if the owner object already has a cache

// If not, create one

// We can accept data for non-element nodes in modern browsers,

// but we should not, see #8335.

// Always return an empty object.

// If it is a node unlikely to be stringify-ed or looped over

// use plain assignment

// Handle: [ owner, key, value ] args

// Always use camelCase key (gh-2257)

// Handle: [ owner, { properties } ] args

// Copy the properties one-by-one to the cache object

// In cases where either:

//

//   1. No key was specified

//   2. A string key was specified, but no value provided

// Take the "read" path and allow the get method to determine

// which value to return, respectively either:

//   1. The entire cache object

//   2. The data stored at the key

// When the key is not a string, or both a key and value

// are specified, set or extend (existing objects) with either:

//   1. An object of properties

//   2. A key and value

// Support array or space separated string of keys

// If key is an array of keys...

// We always set camelCase keys, so remove that.

// Remove the expando if there's no more data

// Support: Chrome <=35 - 45

// Webkit & Blink performance suffers when deleting properties

// from DOM nodes, so set to undefined instead

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// If nothing was found internally, try to fetch any

// data from the HTML5 data-* attribute

// Only convert to a number if it doesn't change the string

// Make sure we set the data so it isn't changed later

// TODO: Now that all calls to _data and _removeData have been replaced

// with direct calls to dataPriv methods, these can be deprecated.

// Gets all values

// Support: IE 11 only

// The attrs elements can be null (#14894)

// Sets multiple values

// The calling jQuery object (element matches) is not empty

// (and therefore has an element appears at this[ 0 ]) and the

// `value` parameter was not undefined. An empty jQuery object

// will result in `undefined` for elem = this[ 0 ] which will

// throw an exception if an attempt to read a data cache is made.

// Attempt to get data from the cache

// The key will always be camelCased in Data

// Attempt to "discover" the data in

// HTML5 custom data-* attrs

// We tried really hard, but the data doesn't exist.

// Set the data...

// We always store the camelCased key

// Speed up dequeue by getting out quickly if this is just a lookup

// If the fx queue is dequeued, always remove the progress sentinel

// Add a progress sentinel to prevent the fx queue from being

// automatically dequeued

// Clear up the last queue stop function

// Not public - generate a queueHooks object, or return the current one

// Ensure a hooks for this queue

// Get a promise resolved when queues of a certain type

// are emptied (fx is the type by default)

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Support: iOS 10.0-10.2 only

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// leading to errors. We need to check for `getRootNode`.

// Inline style trumps all

// isHiddenWithinTree might be called from jQuery#filter function;

// in that case, element will be second argument

// Otherwise, check computed style

// Support: Firefox <=43 - 45

// Disconnected elements can have computed display: none, so first confirm that elem is

// in the document.

// Starting value computation is required for potential unit mismatches

// Support: Firefox <=54

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Trust units reported by jQuery.css

// Iteratively approximate from a nonzero starting point

// Evaluate and update our best guess (doubling guesses that zero out).

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Make sure we update the tween properties later on

// Apply relative offset (+=/-=) if specified

// Determine new display value for elements that need to change

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// check is required in this first loop unless we have a nonempty display value (either

// inline or about-to-be-restored)

// Remember what we're overwriting

// Set the display of the elements in a second loop to avoid constant reflow

// Support: Android 4.0 - 4.3 only

// Check state lost if the name is set (#11217)

// Support: Windows Web Apps (WWA)

// `name` and `type` must use .setAttribute for WWA (#14901)

// Support: Android <=4.1 only

// Older WebKit doesn't clone checked state correctly in fragments

// Support: IE <=11 only

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Support: IE <=9 only

// IE <=9 replaces <option> tags with their contents when inserted outside of

// the select element.

// We have to close these tags to support XHTML (#13200)

// XHTML parsers do not magically insert elements in the

// same way that tag soup parsers do. So we cannot shorten

// this by omitting <tbody> or other required elements.

// Support: IE <=9 - 11 only

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Mark scripts as having already been evaluated

// Add nodes directly

// Convert non-html into a text node

// Deserialize a standard representation

// Descend through wrappers to the right content

// Ensure the created nodes are orphaned (#12392)

// Remember the top-level container

// Convert html into DOM nodes

// Remove wrapper from fragment

// Skip elements already in the context collection (trac-4087)

// Capture executables

// Append to fragment

// Preserve script evaluation history

// Support: IE <=9 - 11+

// focus() and blur() are asynchronous, except when they are no-op.

// So expect focus to be synchronous when the element is already active,

// and blur to be synchronous when the element is not already active.

// (focus and blur are always synchronous in other supported browsers,

// this just defines when we can count on it).

// Accessing document.activeElement can throw unexpectedly

// https://bugs.jquery.com/ticket/13393

// Types can be a map of types/handlers

// ( types-Object, selector, data )

// ( types-Object, data )

// ( types, fn )

// ( types, selector, fn )

// ( types, data, fn )

// Use same guid so caller can remove using origFn

// Can use an empty set, since event contains the info

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */

// Ensure the presence of an event listener that handles manually-triggered

// synthetic events by interrupting progress until reinvoked in response to

// *native* events that it fires directly, ensuring that state changes have

// already occurred before other listeners are invoked.

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Register the controller as a special universal handler for all event namespaces

// Interrupt processing of the outer synthetic .trigger()ed event

// Saved data should be false in such cases, but might be a leftover capture object

// from an async native handler (gh-4350)

// If this is a native event triggered above, everything is now in order

// Fire an inner synthetic event with the original arguments

// Store arguments for use when handling the inner native event

// There will always be at least one argument (an event object), so this array

// will not be confused with a leftover capture object.

// Trigger the native event and capture its result

// focus() and blur() are asynchronous

// Cancel the outer synthetic event

// If this is an inner synthetic event for an event with a bubbling surrogate

// (focus or blur), assume that the surrogate already propagated from triggering the

// native event and prevent that from happening again here.

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// less bad than duplication.

// ...and capture the result

// Extend with the prototype to reset the above stopImmediatePropagation()

// Abort handling of the native event

// Only attach events to objects that accept data

// Caller can pass in an object of custom data in lieu of the handler

// Ensure that invalid selectors throw exceptions at attach time

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Make sure that the handler has a unique ID, used to find/remove it later

// Init the element's event structure and main handler, if this is the first

// Discard the second event of a jQuery.event.trigger() and

// when an event is called after a page has unloaded

// Handle multiple events separated by a space

// There *must* be a type, no attaching namespace-only handlers

// If event changes its type, use the special event handlers for the changed type

// If selector defined, determine special event api type, otherwise given type

// Update special based on newly reset type

// handleObj is passed to all event handlers

// Init the event handler queue if we're the first

// Only use addEventListener if the special events handler returns false

// Add to the element's handler list, delegates in front

// Keep track of which events have ever been used, for event optimization

// Detach an event or set of events from an element

// Once for each type.namespace in types; type may be omitted

// Unbind all events (on this namespace, if provided) for the element

// Remove matching events

// Remove generic event handler if we removed something and no more handlers exist

// (avoids potential for endless recursion during removal of special event handlers)

// Remove data and the expando if it's no longer used

// Make a writable jQuery.Event from the native event object

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Determine handlers

// Run delegates first; they may want to stop propagation beneath us

// If the event is namespaced, then each handler is only invoked if it is

// specially universal or its namespaces are a superset of the event's.

// Call the postDispatch hook for the mapped type

// Find delegate handlers

// Support: IE <=9

// Black-hole SVG <use> instance trees (trac-13180)

// Support: Firefox <=42

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// Don't check non-elements (#13208)

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't conflict with Object.prototype properties (#13203)

// Add the remaining (directly-bound) handlers

// Prevent triggered image.load events from bubbling to window.load

// Utilize native event to ensure correct state for checkable inputs

// For mutual compressibility with _default, replace `this` access with a local var.

// `|| data` is dead code meant only to preserve the variable through minification.

// Claim the first handler

// Return false to allow normal processing in the caller

// dataPriv.set( el, "click", ... )

// Force setup before triggering a click

// Return non-false to allow normal event-path propagation

// For cross-browser consistency, suppress native .click() on links

// Also prevent it if we're currently inside a leveraged native-event stack

// Support: Firefox 20+

// Firefox doesn't alert if the returnValue field is not set.

// This "if" is needed for plain objects

// Allow instantiation without the 'new' keyword

// Event object

// Events bubbling up the document may have been marked as prevented

// by a handler lower down the tree; reflect the correct value.

// Support: Android <=2.3 only

// Create target properties

// Support: Safari <=6 - 7 only

// Target should not be a text node (#504, #13143)

// Put explicitly provided properties onto the event object

// Create a timestamp if incoming event doesn't have one

// Mark it as fixed

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// Includes all common event props including KeyEvent and MouseEvent specific props

// Add which for key events

// Add which for click: 1 === left; 2 === middle; 3 === right

// Utilize native event if possible so blur/focus sequence is correct

// dataPriv.set( this, "focus", ... )

// dataPriv.set( this, "blur", ... )

// Force setup before trigger

// Create mouseenter/leave events using mouseover/out and event-time checks

// so that event delegation works in jQuery.

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Support: Safari 7 only

// Safari sends mouseenter too often; see:

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// for the description of the bug (it existed in older Chrome versions as well).

// For mouseenter/leave call the handler if related is outside the target.

// NB: No relatedTarget if the mouse left/entered the browser window

// ( event )  dispatched jQuery.Event

// ( types-object [, selector] )

// ( types [, fn] )

// Support: IE <=10 - 11, Edge 12 - 13 only

// In IE/Edge using regex groups here causes severe slowdowns.

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// checked="checked" or checked

// Prefer a tbody over its parent table for containing new rows

// Replace/restore the type attribute of script elements for safe DOM manipulation

// 1. Copy private data: events, handlers, etc.

// 2. Copy user data

// Fix IE bugs, see support tests

// Fails to persist the checked state of a cloned checkbox or radio button.

// We can't cloneNode fragments that contain checked, in WebKit

// Use the original fragment for the last item

// instead of the first because it can end up

// being emptied incorrectly in certain situations (#8070).

// Keep references to cloned scripts for later restoration

// Evaluate executable scripts on first document insertion

// Reenable scripts

// Optional AJAX dependency, but won't run scripts if not present

// Fix IE cloning issues

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// Copy the events from the original to the clone

// Return the cloned set

// Support: Chrome <=35 - 45+

// Assign undefined instead of using delete, see Data#remove

// Prevent memory leaks

// Remove any remaining nodes

// See if we can take a shortcut and just use innerHTML

// Remove element nodes and prevent memory leaks

// Make the changes, replacing each non-ignored context element with the new content

// Force callback invocation

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// IE throws on elements created in popups

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Remember the old values, and insert the new ones

// Revert the old values

// Support: Firefox 51+

// Retrieving style before computed somehow

// fixes an issue with getting wrong values

// on detached elements

// getPropertyValue is needed for:

//   .css('filter') (IE 9 only, #12537)

//   .css('--customProperty) (#3144)

// A tribute to the "awesome hack by Dean Edwards"

// Android Browser returns percentage for some values,

// but width seems to be reliably pixels.

// This is against the CSSOM draft spec:

// https://drafts.csswg.org/cssom/#resolved-values

// Remember the original values

// Put in the new values to get a computed value out

// Revert the changed values

// IE returns zIndex value as an integer.

// Define the hook, we'll check on the first run if it's really needed.

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// to missing dependency), remove it.

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// so they're executed at the same time to save the second computation.

// This is a singleton, we need to execute it only once

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Some styles come back with percentage values, even though they shouldn't

// Support: IE 9 - 11 only

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Support: IE 9 only

// Detect overflow:scroll screwiness (gh-3699)

// Support: Chrome <=64

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Nullify the div so it wouldn't be stored in the memory and

// it will also be a sign that checks already performed

// Finish early in limited (non-browser) environments

// Style of cloned element affects source element cloned (#8908)

// Support: IE 9 - 11+, Edge 15 - 18+

// IE/Edge misreport `getComputedStyle` of table rows with width/height

// set in CSS while `offset*` properties report correct values.

// Behavior in IE 9 is more subtle than in newer versions & it passes

// some versions of this test; make sure not to make it pass there!

// Return a vendor-prefixed property or undefined

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Check for vendor prefixed names

// Swappable if display is none or starts with table

// except "table", "table-cell", or "table-caption"

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// Any relative (+/-) values have already been

// normalized at this point

// Guard against undefined "subtract", e.g., when used as in cssHooks

// Adjustment may not be necessary

// Both box models exclude margin

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// For "content", subtract padding

// For "content" or "padding", subtract border

// Add padding

// For "border" or "margin", add border

// Account for positive content-box scroll gutter when requested by providing computedVal

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// Assuming integer scroll gutter, subtract the rest and round down

// Start with computed style

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Use offsetWidth/offsetHeight for when box sizing is unreliable.

// In those cases, the computed value can be trusted to be border-box.

// Adjust for the element's box model

// Support: IE 10 - 11+, Edge 15 - 18+

// Interestingly, in some cases IE 9 doesn't suffer from this issue.

// Fall back to offsetWidth/offsetHeight when value is "auto"

// This happens for inline elements with no explicit setting (gh-3571)

// Support: Android <=4.1 - 4.3 only

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Make sure the element is visible & connected

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// retrieved value as a content box dimension.

// Normalize "" and auto

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Add in style property hooks for overriding the default

// behavior of getting and setting a style property

// We should always get a number back from opacity

// Don't automatically add "px" to these possibly-unitless properties

// Add in properties whose names you wish to fix before

// setting or getting the value

// Get and set the style property on a DOM Node

// Don't set styles on text and comment nodes

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// want to query the value if it is a CSS custom property

// since they are user-defined.

// Check if we're setting a value

// Gets hook for the prefixed version, then unprefixed version

// If a hook was provided get the non-computed value from there

// Otherwise just get the value from the style object

// Convert "+=" or "-=" to relative numbers (#7345)

// Fixes bug #9237

// Make sure that null and NaN values aren't set (#7116)

// If a number was passed in, add the unit (except for certain CSS properties)

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// "px" to a few hardcoded values.

// background-* props affect original clone's values

// If a hook was provided, use that value, otherwise just set the specified value

// want to modify the value if it is a CSS custom property

// Make numeric if forced or a qualifier was provided and val looks numeric

// If a hook was provided get the computed value from there

// Try prefixed name followed by the unprefixed name

// Otherwise, if a way to get the computed value exists, use that

// Convert "normal" to computed value

// Certain elements can have dimension info if we invisibly show them

// but it must have a current display style that would benefit

// Support: Safari 8+

// Table columns in Safari have non-zero offsetWidth & zero

// getBoundingClientRect().width unless display is changed.

// Running getBoundingClientRect on a disconnected node

// in IE throws an error.

// Only read styles.position if the test has a chance to fail

// to avoid forcing a reflow.

// Account for unreliable border-box dimensions by comparing offset* to computed and

// faking a content-box to get border and padding (gh-3699)

// Convert to pixels if value adjustment is needed

// These hooks are used by animate to expand properties

// Assumes a single number if not a string

// Use a property on the element directly when it is not a DOM element,

// or when there is no matching style property that exists.

// Passing an empty string as a 3rd parameter to .css will automatically

// attempt a parseFloat and fallback to a string if the parse fails.

// Simple values such as "10px" are parsed to Float;

// complex values such as "rotate(1rad)" are returned as-is.

// Use step hook for back compat.

// Use cssHook if its there.

// Use .style if available and use plain properties where available.

// Panic based approach to setting things on disconnected nodes

// Back compat <1.8 extension point

// Animations created synchronously will run synchronously

// Generate parameters to create a standard animation

// If we include width, step value is 1 to do all cssExpand values,

// otherwise step value is 2 to skip over Left and Right

// We're done with this property

// Don't match elem in the :animated selector

// If there's more to do, yield

// If this was an empty animation, synthesize a final progress notification

// Resolve the animation and report its conclusion

// If we are going to the end, we want to run all the tweens

// otherwise we skip this part

// Resolve when we played the last frame; otherwise, reject

// camelCase, specialEasing and expand cssHook pass

// Not quite $.extend, this won't overwrite existing keys.

// Reusing 'index' because we have the correct "name"

// Attach callbacks from options

// Queue-skipping animations hijack the fx hooks

// Detect show/hide animations

// Ensure the complete handler is called before this completes

// Pretend to be hidden if this is a "show" and

// there is still data from a stopped show/hide

// Bail out if this is a no-op like .hide().hide()

// Restrict "overflow" and "display" styles during box animations

// Record all 3 overflow attributes because IE does not infer the shorthand

// from identically-valued overflowX and overflowY and Edge just mirrors

// the overflowX value there.

// Identify a display type, preferring old show/hide data over the CSS cascade

// Get nonempty value(s) by temporarily forcing visibility

// Animate inline elements as inline-block

// Restore the original display value at the end of pure show/hide animations

// Implement show/hide animations

// General show/hide setup for this element animation

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Show elements before animating them

/* eslint-disable no-loop-func */

/* eslint-enable no-loop-func */

// The final step of a "hide" animation is actually hiding the element

// Per-property setup

// Go to the end state if fx are off

// Normalize opt.queue - true/undefined/null -> "fx"

// Queueing

// Show any hidden elements after setting opacity to 0

// Operate on a copy of prop so per-property easing won't be lost

// Empty animations, or finishing resolves immediately

// Start the next in the queue if the last step wasn't forced.

// Timers currently will call their complete callbacks, which

// will dequeue but only if they were gotoEnd.

// Enable finishing flag on private data

// Look for any active animations, and finish them

// Empty the queue first

// Look for any animations in the old queue and finish them

// Turn off finishing flag

// Generate shortcuts for custom animations

// Run the timer and safely remove it when done (allowing for external removal)

// Default speed

// Based off of the plugin by Clint Helfers, with permission.

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// Support: Android <=4.3 only

// Default value for a checkbox should be "on"

// Must access selectedIndex to make default options select

// An input loses its value after becoming a radio

// Don't get/set attributes on text, comment and attribute nodes

// Fallback to prop when attributes are not supported

// Attribute hooks are determined by the lowercase version

// Grab necessary hook if one is defined

// Attribute names can contain non-HTML whitespace characters

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// Hooks for boolean attributes

// Remove boolean attributes when set to false

// Avoid an infinite loop by temporarily removing this function from the getter

// Strip and collapse whitespace according to HTML spec

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// Don't get/set properties on text, comment and attribute nodes

// Fix name and attach hooks

// elem.tabIndex doesn't always return the

// correct value when it hasn't been explicitly set

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// Use proper attribute retrieval(#12072)

// Accessing the selectedIndex property

// forces the browser to respect setting selected

// on the option

// The getter ensures a default option is selected

// when in an optgroup

// eslint rule "no-unused-expressions" is disabled for this code

// since it considers such accessions noop

/* eslint no-unused-expressions: "off" */

// Only assign if different to avoid unneeded rendering.

// This expression is here for better compressibility (see addClass)

// Remove *all* instances

// Toggle individual class names

// Check each className given, space separated list

// Toggle whole class name

// Store className if set

// If the element has a class name or if we're passed `false`,

// then remove the whole classname (if there was one, the above saved it).

// Otherwise bring back whatever was previously saved (if anything),

// falling back to the empty string if nothing was stored.

// Treat null/undefined as ""; convert numbers to string

// If set returns undefined, fall back to normal setting

// Handle most common string cases

// Support: IE <=10 - 11 only

// option.text throws exceptions (#14686, #14858)

// Strip and collapse whitespace

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// Loop through all the selected options

// IE8-9 doesn't update selected after form reset (#2551)

// Don't return options that are disabled or in a disabled optgroup

// We don't need an array for one selects

// Get the specific value for the option

// Multi-Selects return an array

/* eslint-disable no-cond-assign */

/* eslint-enable no-cond-assign */

// Force browsers to behave consistently when non-matching value is set

// Radios and checkboxes getter/setter

// Return jQuery for attributes-only inclusion

// Don't do events on text and comment nodes

// Namespaced trigger; create a regexp to match event type in handle()

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Clean up the event in case it is being reused

// Clone any incoming data and prepend the event, creating the handler arg list

// Allow special events to draw outside the lines

// Determine event propagation path in advance, per W3C events spec (#9951)

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Fire handlers on the event path

// jQuery handler

// Native handler

// If nobody prevented the default action, do it now

// Call a native DOM method on the target with the same name as the event.

// Don't do default actions on window, that's where global variables be (#6170)

// Don't re-trigger an onFOO event when we call its FOO() method

// Prevent re-triggering of the same event, since we already bubbled it above

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// Piggyback on a donor event to simulate a different one

// Used only for `focus(in | out)` events

// Support: Firefox <=44

// Firefox doesn't have focus(in | out) events

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// focus(in | out) events fire after focus & blur events,

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Handle: regular nodes (via `this.ownerDocument`), window

// (via `this.document`) & document (via `this`).

// Cross-browser xml parsing

// IE throws on parseFromString with invalid input.

// Serialize array item.

// Treat each array item as a scalar.

// Item is non-scalar (array or object), encode its numeric index.

// Serialize scalar item.

// Serialize object item.

// Serialize an array of form elements or a set of

// key/values into a query string

// If value is a function, invoke it and use its return value

// If an array was passed in, assume that it is an array of form elements.

// Serialize the form elements

// If traditional, encode the "old" way (the way 1.3.2 or older

// did it), otherwise encode params recursively.

// Return the resulting serialization

// Can add propHook for "elements" to filter or add form elements

// Use .is( ":disabled" ) so that fieldset[disabled] works

/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */

/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Anchor tag for parsing the document origin

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// dataTypeExpression is optional and defaults to "*"

// For each dataType in the dataTypeExpression

// Prepend if requested

// Base inspection function for prefilters and transports

// A special extend for ajax options

// that takes "flat" options (not to be deep extended)

// Fixes #9887

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */

// Counter for holding the number of active queries

// Last-Modified header cache for next request

/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

// Data converters

// Keys separate source (or catchall "*") and destination types with a single space

// Convert anything to text

// Text to html (true = no transformation)

// Evaluate text as a json expression

// Parse text as xml

// For options that shouldn't be deep extended:

// you can add your own custom options here if

// and when you create one that shouldn't be

// deep extended (see ajaxExtend)

// Creates a full fledged settings object into target

// with both ajaxSettings and settings fields.

// If target is omitted, writes into ajaxSettings.

// Building a settings object

// Extending ajaxSettings

// Main method

// If url is an object, simulate pre-1.5 signature

// Force options to be an object

// URL without anti-cache param

// Response headers

// timeout handle

// Url cleanup var

// Request state (becomes false upon send and true upon completion)

// To know if global events are to be dispatched

// Loop variable

// uncached part of the url

// Create the final options object

// Callbacks context

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Deferreds

// Status-dependent callbacks

// Headers (they are sent all at once)

// Default abort message

// Fake xhr

// Builds headers hashtable if needed

// Raw string

// Caches the header

// Overrides response content-type header

// Execute the appropriate callbacks

// Lazy-add the new callbacks in a way that preserves old ones

// Cancel the request

// Attach deferreds

// A cross-domain request is in order when the origin doesn't match the current origin.

// Add protocol if not provided (prefilters might expect it)

// Handle falsy url in the settings object (#10093: consistency with old signature)

// We also use the url parameter if available

// Alias method option to type as per ticket #12004

// Extract dataTypes list

// Support: IE <=8 - 11, Edge 12 - 15

// IE throws exception on accessing the href property if url is malformed,

// e.g. http://example.com:80x/

// Support: IE <=8 - 11 only

// Anchor's host property isn't correctly set when s.url is relative

// If there is an error parsing the URL, assume it is crossDomain,

// it can be rejected by the transport if it is invalid

// Convert data if not already a string

// If request was aborted inside a prefilter, stop there

// Apply prefilters

// We can fire global events as of now if asked to

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Check for headers option

// Watch for a new set of requests

// Uppercase the type

// Determine if request has content

// Save the URL in case we're toying with the If-Modified-Since

// and/or If-None-Match header later on

// Remove hash to simplify url manipulation

// More options handling for requests with no content

// Remember the hash so we can put it back

// If data is available and should be processed, append data to url

// #9682: remove data so that it's not used in an eventual retry

// Add or update anti-cache param if needed

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the correct header, if data is being sent

// Set the Accepts header for the server, depending on the dataType

// Allow custom headers/mimetypes and early abort

// Abort if not done already and return

// Aborting is no longer a cancellation

// If no transport, we auto-abort

// Install callbacks on deferreds

// Get transport

// If request was aborted inside ajaxSend, stop there

// Send global event

// Timeout

// Rethrow post-completion exceptions

// Propagate others as results

// Callback for when everything is done

// Ignore repeat invocations

// Clear timeout if it exists

// Dereference transport for early garbage collection

// (no matter how long the jqXHR object will be used)

// Cache response headers

// Set readyState

// Determine if successful

// Get response data

// Remove auto dataType and get content-type in the process

// Check if we're dealing with a known content-type

// Check to see if we have a response for the expected dataType

// Try convertible dataTypes

// Or just use first one

// If we found a dataType

// We add the dataType to the list if needed

// and return the corresponding response

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */

// Use a noop converter for missing script

// Convert no matter what (that way responseXXX fields are always set)

// Work with a copy of dataTypes in case we need to modify it for conversion

// Create converters map with lowercased keys

// Convert to each sequential dataType

// Apply the dataFilter if provided

// There's only work to do if current dataType is non-auto

// Convert response if prev dataType is non-auto and differs from current

// If none found, seek a pair

// Seek a direct converter

// If conv2 outputs current

// If prev can be converted to accepted input

// Condense equivalence converters

// Apply converter (if not an equivalence)

// Unless errors are allowed to bubble, catch and return them

// If successful, handle type chaining

// if no content

// Extract error from statusText and normalize for non-aborts

// Set data for the fake xhr object

// Success/Error

// Complete

// Handle the global AJAX counter

// The url can be an options object (which then must have .url)

// Shift arguments if data argument was omitted

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Only evaluate the response if it is successful (gh-4126)

// dataFilter is not invoked for failure responses, so using it instead

// of the default converter is kludgy but it works.

// The elements to wrap the target around

// File protocol always yields status code 0, assume 200

// #1450: sometimes IE returns 1223 when it should be 204

// Cross domain only allowed if supported through XMLHttpRequest

// Apply custom fields if provided

// Override mime type if needed

// Set headers

// X-Requested-With header

// For cross-domain requests, seeing as conditions for a preflight are

// akin to a jigsaw puzzle, we simply never set it to be sure.

// (it can always be set on a per-request basis or even using ajaxSetup)

// For same-domain requests, won't change header if already provided.

// Callback

// On a manual native abort, IE9 throws

// errors on any property access that is not readyState

// File: protocol always yields status 0; see #8605, #14207

// IE9 has no XHR2 but throws on binary (trac-11426)

// For XHR2 non-text, let the caller handle it (gh-2498)

// Listen to events

// Use onreadystatechange to replace onabort

// to handle uncaught aborts

// Check readyState before timeout as it changes

// Allow onerror to be called first,

// but that will not handle a native abort

// Also, save errorCallback to a variable

// as xhr.onerror cannot be accessed

// Create the abort callback

// Do send the request (this may raise an exception)

// #14683: Only rethrow if this hasn't been notified as an error yet

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Install script dataType

// Handle cache's special case and crossDomain

// Bind script tag hack transport

// This transport only deals with cross domain or forced-by-attrs requests

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Default jsonp settings

// Detect, normalize options and install callbacks for jsonp requests

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Delegate to script

// Get callback name, remembering preexisting value associated with it

// Insert callback into url or form data

// Use data converter to retrieve json after script execution

// Force json dataType

// Install callback

// Clean-up function (fires after converters)

// If previous value didn't exist - remove it

// Save back as free

// Make sure that re-using the options doesn't screw things around

// Save the callback name for future use

// Call if it was a function and we have a response

// Support: Safari 8 only

// In Safari 8 documents created via document.implementation.createHTMLDocument

// collapse sibling forms: the second one becomes a child of the first one.

// Because of that, this security measure has to be disabled in Safari 8.

// https://bugs.webkit.org/show_bug.cgi?id=137337

// Argument "data" should be string of html

// context (optional): If specified, the fragment will be created in this context,

// defaults to document

// keepScripts (optional): If true, will include scripts passed in the html string

// Single tag

// Stop scripts or inline event handlers from being executed immediately

// by using document.implementation

// Set the base href for the created document

// so any parsed elements with URLs

// are based on the document's URL (gh-2965)

/**
 * Load a url into a page
 */

// If it's a function

// We assume that it's the callback

// If we have elements to modify, make the request

// If "type" variable is undefined, then "GET" method will be used.

// Make value of this field explicit since

// user can override it through ajaxSetup method

// Save response for use in complete callback

// If a selector was specified, locate the right elements in a dummy div

// Exclude scripts to avoid IE 'Permission Denied' errors

// Otherwise use the full result

// Set position first, in-case top/left are set even on static elem

// Need to be able to calculate position if either

// top or left is auto and position is either absolute or fixed

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// offset() relates an element's border box to the document origin

// Preserve chaining for setter

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Running getBoundingClientRect on a

// disconnected node in IE throws an error

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// position() relates an element's margin box to its offset parent's padding box

// This corresponds to the behavior of CSS absolute positioning

// position:fixed elements are offset from the viewport, which itself always has zero offset

// Assume position:fixed implies availability of getBoundingClientRect

// Account for the *real* offset parent, which can be the document or its root element

// when a statically positioned element is identified

// Incorporate borders into its offset, since they are outside its content origin

// Subtract parent offsets and element margins

// This method will return documentElement in the following cases:

// 1) For the element inside the iframe without offsetParent, this method will return

//    documentElement of the parent window

// 2) For the hidden or detached element

// 3) For body or html element, i.e. in case of the html node - it will return itself

// but those exceptions were never presented as a real life use-cases

// and might be considered as more preferable results.

// This logic, however, is not guaranteed and can change at any point in the future

// Create scrollLeft and scrollTop methods

// Coalesce documents and windows

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Add the top/left cssHooks using jQuery.fn.position

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// getComputedStyle returns percent when specified for top/left/bottom/right;

// rather than make the css module depend on the offset module, just check for it here

// If curCSS returns percentage, fallback to offset

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Margin is only for outerHeight, outerWidth

// Get document width or height

// Get width or height on the element, requesting but not forcing parseFloat

// Set width or height on the element

// ( namespace ) or ( selector, types [, fn] )

// Handle event binding

// Support: Android <=4.0 only

// Make sure we trim BOM and NBSP

// Bind a function to a context, optionally partially applying any

// arguments.

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// However, it is not slated for removal any time soon

// Quick check to determine if target is callable, in the spec

// this throws a TypeError, but we will just return undefined.

// Simulated bind

// Set the guid of unique handler to the same of original handler, so it can be removed

// As of jQuery 3.0, isNumeric is limited to

// strings and numbers (primitives or objects)

// that can be coerced to finite numbers (gh-2662)

// parseFloat NaNs numeric-cast false positives ("")

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// subtraction forces infinities to NaN

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Expose jQuery and $ identifiers, even in AMD

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// and CommonJS for browser emulators (#13566)

/* 49 */

/* 50 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 51 */

/* 52 */

// 7.2.2 IsArray(argument)

/* 53 */

// eslint-disable-next-line no-throw-literal

/* 54 */

// 21.2.5.3 get RegExp.prototype.flags

/* 55 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 56 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 57 */

// fast case for arrays with default iterator

/* 58 */

/* 59 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 60 */

/* 61 */

/* 62 */

/* 63 */

/* 64 */

// IE 8- don't enum bug keys

/* 65 */

/* 66 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 67 */

/* 68 */

/* 69 */

/* 70 */

// 20.2.2.28 Math.sign(x)

/* 71 */

// 20.2.2.14 Math.expm1(x)

/* 72 */

// true  -> String#at

// false -> String#codePointAt

/* 73 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 74 */

// helper for String#{startsWith, endsWith, includes}

/* 75 */

// 7.2.8 IsRegExp(argument)

/* 76 */

/* 77 */

// check on default Array iterator

/* 78 */

/* 79 */

/* 80 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 81 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 82 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 83 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 84 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 85 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

// EXPORTS

// UNUSED EXPORTS: Swiper

// CONCATENATED MODULE: ../node_modules/ssr-window/ssr-window.esm.js

/**
 * SSR Window 3.0.0
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */

/* eslint-disable no-param-reassign */

/* reexport */

// CONCATENATED MODULE: ../node_modules/dom7/dom7.esm.js

/**
 * Dom7 3.0.0
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * https://framework7.io/docs/dom7.html
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */

/*#__PURE__*/

// arr = qsa(selector, document);

// Get attr

// Set attrs

// String

// Object

// Live events

// .css({ width: '100px' })

// .css('width')

// .css('width', '100px')

// eslint-disable-next-line

/* harmony default export */

// CONCATENATED MODULE: ../node_modules/swiper/esm/utils/utils.js

// Some old versions of Webkit choke when 'none' is passed; pass

// empty string instead in this case

// Latest Chrome and webkits Fix

// CONCATENATED MODULE: ../node_modules/swiper/esm/utils/get-support.js

// No support

// CONCATENATED MODULE: ../node_modules/swiper/esm/utils/get-device.js

// Export object

// Android

// CONCATENATED MODULE: ../node_modules/swiper/esm/utils/get-browser.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/modules/resize/resize.js

// Emit resize

// Emit orientationchange

// CONCATENATED MODULE: ../node_modules/swiper/esm/modules/observer/observer.js

// The observerUpdate event should only be triggered

// once despite the number of mutations.  Additional

// triggers are redundant and are very costly

// Observe container

// Observe wrapper

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onTouchStart.js

// change target el for shadow root componenet

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onTouchMove.js

// isMoved = true;

// Vertical

// Grab Cursor

// Threshold

// Directions locks

// Update active index in free mode

// Velocity

// Update progress

// Update translate

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onTouchEnd.js

// Return Grab Cursor

// Time diff

// Tap, doubleTap, Click

// this implies that the user stopped moving a finger then released.

// There would be no events with distance zero, so the last event is stale.

// Fix duration

// If freeModeSticky is active and the user ends a swipe with a slow-velocity

// event, then durations can be 20+ seconds to slide one (or zero!) slides.

// It's easy to see this when simulating touch with mouse events. To fix this,

// limit single-slide swipes to the default slide duration. This also has the

// nice side effect of matching slide speed if the user stopped moving before

// lifting finger or mouse vs. moving slowly before lifting the finger/mouse.

// For faster swipes, also apply limits (albeit higher ones).

// Find current slide

// Find current slide size

// Long touches

// Short swipes

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onResize.js

// Breakpoints

// Save locks

// Disable locks on resize

// Return locks after resize

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onClick.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/onScroll.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/events/index.js

// Overrides

// ssr

// To support iOS's swipe-to-go-back gesture (when being used in-app).

// Free mode

// Autoheight

// Set wrapper width

// Virtual Translate

// Effects

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// Slides grid

// in px

// Disable swiper and hide navigation when container not overflow

// Round length

// Touches

// Unique Navigation Elements

// Resistance

// Progress

// Cursor

// Clicks

// Images

// loop

// Swiping/no swiping

// '.swipe-handler',

// Passive Listeners

// NS

// NEW

// Callbacks

// Internals

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/defaults.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/core-class.js

/* eslint no-param-reassign: "off" */

// Extend params

// Add event listeners

// Module create callback

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateSize.js

// Subtract paddings

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateSlides.js

// reset margins

// Set slides order

// Remove last grid elements depending on width

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateAutoHeight.js

// Find slides currently in view

// Find new height from highest slide in view

// Update Height

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateSlidesOffset.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateSlidesProgress.js

// Visible Slides

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateProgress.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateSlidesClasses.js

// Active classes

// Duplicate to all looped slides

// Next Slide

// Prev Slide

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateActiveIndex.js

// Normalize slideIndex

// Get real index

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/updateClickedSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/update/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/getTranslate.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/setTranslate.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/minTranslate.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/maxTranslate.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/translateTo.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/translate/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/transition/setTransition.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/transition/transitionStart.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/transition/transitionEnd.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/transition/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideTo.js

/**
     * The `index` argument converted from `string` to `number`.
     * @type {number}
     */

/**
     * Determines whether the `index` argument is a valid `number`
     * after being converted from the `string` type.
     * @type {boolean}
     */

// Knowing that the converted `index` is a valid number,

// we can update the original argument's value.

// Update Index

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideToLoop.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideNext.js

/* eslint no-unused-vars: "off" */

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slidePrev.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideReset.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideToClosest.js

// The current translate is on or after the current snap index, so the choice

// is between the current index and the one after it.

// The current translate is before the current snap index, so the choice

// is between the current index and the one before it.

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/slideToClickedSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/slide/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/loop/loopCreate.js

// Remove duplicated slides

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/loop/loopFix.js

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/loop/loopDestroy.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/loop/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/grab-cursor/setGrabCursor.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/grab-cursor/unsetGrabCursor.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/grab-cursor/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/appendSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/prependSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/addSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/removeSlide.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/removeAllSlides.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/manipulation/index.js

// Touch Events

// Prevent Links Clicks

// Resize handler

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/breakpoints/setBreakpoint.js

// Get breakpoint for window width and update parameters

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/breakpoints/getBreakpoint.js

// Get breakpoint for window width

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/breakpoints/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/check-overflow/index.js

// events

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/classes/addClasses.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/classes/removeClasses.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/classes/index.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/images/loadImage.js

// image already loaded...

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/images/preloadImages.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/core/images/index.js

// Swiper Instance

// Extend defaults with modules params

// Extend defaults with passed params

// add event listeners

// Save Dom lib

// Find el

// Find Wrapper

// Return app instance

// Children needs to return slot items

// Extend Swiper

// Classes

// Slides

// isDirection

// RTL

// Indexes

// Props

// Locks

// Form elements to match

// Last click time

// Velocities

// Install Modules

// Init

// Set breakpoint

// Add Classes

// Create loop

// Update size

// Update slides

// Set Grab Cursor

// Slide To Initial Slide

// Attach events

// Init Flag

// Emit

// Detach events

// Destroy loop

// Cleanup styles

// Detach emitter events

// no getter for object

// something got wrong

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/virtual/virtual.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/keyboard/keyboard.js

// jquery fix

// Check that swiper should be inside of visible area of window

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/mousewheel/mousewheel.js

// always returns true in newer browsers as per the standard.

// @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature

// This is the only way to test support for the `wheel` event in IE9+.

// Reasonable defaults

// pixelX, pixelY

// Legacy

// side scrolling on FF with DOMMouseScroll

// if user scrolls with shift he wants horizontal scroll

// delta in LINE units

// delta in PAGE units

// Fall-back if spin cannot be determined

// Get the scroll positions

// Freemode or scrollContainer:

// If we recently snapped after a momentum scroll, then ignore wheel events

// to give time for the deceleration to finish. Stop ignoring after 500 msecs

// or if it's a new scroll (larger delta or inverse sign as last event before

// an end-of-momentum snap).

// When wheel scrolling starts with sticky (aka snap) enabled, then detect

// the end of a momentum scroll by storing recent (N=15?) wheel events.

// 1. do all N events have decreasing or same (absolute value) delta?

// 2. did all N events arrive in the last M (M=500?) msecs?

// 3. does the earliest event have an (absolute value) delta that's

//    at least P (P=1?) larger than the most recent event's delta?

// 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?

// If 1-4 are "yes" then we're near the end of a momentum scroll deceleration.

// Snap immediately and ignore remaining wheel events in this scroll.

// See comment above for "remaining wheel events in this scroll" determination.

// If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.

// Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.

// We're at the end of the deceleration of a momentum scroll, so there's no need

// to wait for more events. Snap ASAP on the next tick.

// Also, because there's some remaining momentum we'll bias the snap in the

// direction of the ongoing scroll because it's better UX for the scroll to snap

// in the same direction as the scroll instead of reversing to snap.  Therefore,

// if it's already scrolled more than 20% in the current direction, keep going.

// if we get here, then we haven't detected the end of a momentum scroll, so

// we'll consider a scroll "complete" when there haven't been any wheel events

// for 500ms.

// Emit event

// Return page scroll on edge positions

// Stop autoplay

// Register the new event in a variable which stores the relevant data

// Keep the most recent events

// If it's time to release the scroll:

//   Return now so you don't hit the preventDefault.

// If there is at least one previous recorded event:

//   If direction has changed or

//   if the scroll is quicker than the previous one:

//     Animate the slider.

// Else (this is the first time the wheel is moved):

// If the movement is NOT big enough and

// if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):

//   Don't go any further (avoid insignificant scroll movement).

// If user is scrolling towards the end:

//   If the slider hasn't hit the latest slide or

//   if the slider is a loop and

//   if the slider isn't moving right now:

//     Go to next slide and

//     emit a scroll event.

// Else (the user is scrolling towards the beginning) and

// if the slider hasn't hit the first slide or

// if the slider is a loop and

// if the slider isn't moving right now:

//   Go to prev slide and

//   emit a scroll event.

// If you got here is because an animation has been triggered so store the current time

// Return true to animate scroll on edges

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/navigation/navigation.js

// Update Navigation Buttons

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/pagination/pagination.js

// Render || Update Pagination bullets/items

// Types

// Render Container

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/scrollbar/scrollbar.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/parallax/parallax.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/zoom/zoom.js

// Calc Scale From Multi-touches

// Events

// Define if we need image drag

// Toggle Zoom

// Zoom Out

// Zoom In

// Attach/Detach Events

// Scale image

// Move image

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/lazy/lazy.js

// Next Slides

// Prev Slides

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/controller/controller.js

/* eslint no-bitwise: ["error", { "allow": [">>"] }] */

// Get the indexes of x1 and x3 (the array indexes before and after given x2):

// xxx: for now i will just save one spline function to to

// this will create an Interpolate function based on the snapGrids

// x is the Grid of the scrolled scroller and y will be the controlled scroller

// it makes sense to create this only once and recall it for the interpolation

// the function does a lot of value caching for performance

// i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid

// but it did not work out

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/a11y/a11y.js

// Container

// Wrapper

// Slide

// Pagination

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/history/history.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/hash-navigation/hash-navigation.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/autoplay/autoplay.js

/* eslint no-underscore-dangle: "off" */

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/effect-fade/effect-fade.js

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/effect-cube/effect-cube.js

// Set shadows

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/effect-flip/effect-flip.js

// if (!$(this).hasClass(swiper.params.slideActiveClass)) return;

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/effect-coverflow/effect-coverflow.js

// Each slide offset from center

// Allow percentage to make a relative stretch for responsive sliders

// Fix for ultra small values

// CONCATENATED MODULE: ../node_modules/swiper/esm/components/thumbs/thumbs.js

// Find actual thumbs index to slide to

// Activate thumbs

// 'bullets' or 'progressbar' or 'fraction' or 'custom'

/* 90 */

/* 91 */

/* 92 */

// Don't enum bug & hidden keys

/* 93 */

/* 94 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 95 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 96 */

// 7.2.9 SameValue(x, y)

/* 97 */

/* , ...args */

/* 98 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 99 */

/* 100 */

/* 101 */

/* 102 */

// 20.1.2.3 Number.isInteger(number)

/* 103 */

// 20.2.2.20 Math.log1p(x)

/* 104 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 105 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 106 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 107 */

/* 108 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 109 */

/* 110 */

/* 111 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 112 */

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// may throw

// variable length - can't use forEach

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// unwrap

// constructor polyfill

// 25.4.3.1 Promise(executor)

// eslint-disable-next-line no-unused-vars

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 113 */

// 25.4.1.5 NewPromiseCapability(C)

/* 114 */

/* 115 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 116 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 117 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 118 */

// all object keys, includes non-enumerable and symbols

/* 119 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

/* 126 */

/* 127 */

/* 128 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 129 */

/* 130 */

// all enumerable object keys, includes symbols

/* 131 */

/* 132 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 133 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 134 */

/* 135 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 136 */

// 19.1.2.14 Object.keys(O)

/* 137 */

/* 138 */

// 19.1.2.5 Object.freeze(O)

/* 139 */

// 19.1.2.17 Object.seal(O)

/* 140 */

// 19.1.2.15 Object.preventExtensions(O)

/* 141 */

// 19.1.2.12 Object.isFrozen(O)

/* 142 */

// 19.1.2.13 Object.isSealed(O)

/* 143 */

// 19.1.2.11 Object.isExtensible(O)

/* 144 */

// 19.1.3.1 Object.assign(target, source)

/* 145 */

// 19.1.3.10 Object.is(value1, value2)

/* 146 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 147 */

// 19.1.3.6 Object.prototype.toString()

/* 148 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 149 */

// 19.2.4.2 name

/* 150 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 151 */

// 18.2.5 parseInt(string, radix)

/* 152 */

// 18.2.4 parseFloat(string)

/* 153 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 154 */

// V8 ~ Android 4.3-

/* 155 */

// IE7-

/* 156 */

// 20.1.2.1 Number.EPSILON

/* 157 */

// 20.1.2.2 Number.isFinite(number)

/* 158 */

/* 159 */

// 20.1.2.4 Number.isNaN(number)

/* 160 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 161 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 162 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 163 */

// 20.1.2.12 Number.parseFloat(string)

/* 164 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 165 */

// 20.2.2.3 Math.acosh(x)

/* 166 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 167 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 168 */

// 20.2.2.9 Math.cbrt(x)

/* 169 */

// 20.2.2.11 Math.clz32(x)

/* 170 */

// 20.2.2.12 Math.cosh(x)

/* 171 */

/* 172 */

// 20.2.2.16 Math.fround(x)

/* 173 */

/* 174 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 175 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 176 */

// 20.2.2.21 Math.log10(x)

/* 177 */

/* 178 */

// 20.2.2.22 Math.log2(x)

/* 179 */

/* 180 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 181 */

// 20.2.2.33 Math.tanh(x)

/* 182 */

// 20.2.2.34 Math.trunc(x)

/* 183 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 184 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 185 */

// 21.1.3.25 String.prototype.trim()

/* 186 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 187 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 188 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 189 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 190 */

// 21.1.3.13 String.prototype.repeat(count)

/* 191 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 192 */

// B.2.3.2 String.prototype.anchor(name)

/* 193 */

// B.2.3.3 String.prototype.big()

/* 194 */

// B.2.3.4 String.prototype.blink()

/* 195 */

// B.2.3.5 String.prototype.bold()

/* 196 */

// B.2.3.6 String.prototype.fixed()

/* 197 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 198 */

// B.2.3.8 String.prototype.fontsize(size)

/* 199 */

// B.2.3.9 String.prototype.italics()

/* 200 */

// B.2.3.10 String.prototype.link(url)

/* 201 */

// B.2.3.11 String.prototype.small()

/* 202 */

// B.2.3.12 String.prototype.strike()

/* 203 */

// B.2.3.13 String.prototype.sub()

/* 204 */

// B.2.3.14 String.prototype.sup()

/* 205 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 206 */

/* 207 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 208 */

/* 209 */

/* 210 */

/* 211 */

/* 212 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 213 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 214 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 215 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 216 */

// fallback for not array-like ES3 strings and DOM objects

/* 217 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 218 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 219 */

// cross-realm fallback

/* 220 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 221 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 222 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 223 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 224 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 225 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 226 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 227 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 228 */

/* 229 */

/* 230 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 231 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 232 */

/* 233 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 234 */

// 21.2.5.14 RegExp.prototype.toString()

/* 235 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 236 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 237 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 238 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 239 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 240 */

/* 241 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 242 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 243 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 244 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 245 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

/* 254 */

/* 255 */

/* 256 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 257 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 258 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 259 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 260 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 261 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 262 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 263 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 264 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 265 */

// 26.1.10 Reflect.isExtensible(target)

/* 266 */

// 26.1.11 Reflect.ownKeys(target)

/* 267 */

// 26.1.12 Reflect.preventExtensions(target)

/* 268 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 269 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 270 */

/* 271 */

// https://github.com/tc39/Array.prototype.includes

/* 272 */

/* 273 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 274 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 275 */

/* 276 */

/* , fillString = ' ' */

/* 277 */

/* 278 */

/* 279 */

/* 280 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 281 */

/* 282 */

/* 283 */

/* 284 */

/* 285 */

/* 286 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 287 */

/* 288 */

// https://github.com/tc39/proposal-object-values-entries

/* 289 */

/* 290 */

/* 291 */

/* 292 */

// https://github.com/tc39/proposal-promise-finally

/* 293 */

/* 294 */

// ie9- setTimeout & setInterval additional parameters fix

/* 295 */

/* 296 */

// TODO: Not spec compliant, should be false.

/* 297 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 298 */

/* 299 */

// https://github.com/tc39/proposal-global

/* 300 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

// extracted by mini-css-extract-plugin

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/*!
 * jQuery Validation Plugin v1.19.2
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2020 Jörn Zaefferer
 * Released under the MIT license
 */

// https://jqueryvalidation.org/validate/

// If nothing is selected, return nothing; can't chain anyway

// Check if a validator for this form was already created

// Add novalidate tag if HTML5.

// Track the used submit button to properly handle scripted

// submits later.

// Allow suppressing validation by adding a cancel class to the submit button

// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button

// Validate the form on submit

// Insert a hidden input as a replacement for the missing submit button

// The hidden input is inserted in two cases:

//   - A user defined a `submitHandler`

//   - There was a pending request due to `remote` method and `stopRequest()`

//     was called to submit the form in case it's valid

// And clean up afterwards; thanks to no-block-scope, hidden can be referenced

// Prevent submit for invalid forms or custom submit handlers

// Prevent form submit to be able to see console output

// https://jqueryvalidation.org/valid/

// https://jqueryvalidation.org/rules/

// If nothing is selected, return empty object; can't chain anyway

// Remove messages from rules, but allow them to be set separately

// Make sure required is at front

// Make sure remote is at back

// JQuery trim is deprecated, provide a trim method based on String.prototype.trim

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim#Polyfill

// Custom selectors

// '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

// https://jqueryvalidation.org/blank-selector/

// https://jqueryvalidation.org/filled-selector/

// https://jqueryvalidation.org/unchecked-selector/

// Constructor for validator

// https://jqueryvalidation.org/jQuery.validator.format/

// Hide error label and remove error class on focus if enabled

// Click on selects, radiobuttons and checkboxes

// https://jqueryvalidation.org/jQuery.validator.setDefaults/

// Set form expando on contenteditable

// Ignore the element if it belongs to another form. This will happen mainly

// when setting the `form` attribute of an input to the id of another form.

// https://jqueryvalidation.org/Validator.form/

// https://jqueryvalidation.org/Validator.element/

// If this element is grouped, then validate all group elements already

// containing a value

// Hide error containers on last error

// Add aria-invalid status for screen readers

// https://jqueryvalidation.org/Validator.showErrors/

// Add items to error list and map

// Remove items from success list

// https://jqueryvalidation.org/Validator.resetForm/

/* jshint unused: false */

// This check allows counting elements with empty error

// message as invalid elements

// Ignore IE throwing errors when focusing hidden elements

// Select all valid inputs inside the form (no submit or reset buttons)

// For contenteditable

// Ignore elements that belong to other/nested forms

// Select only the first element for each name, and only those with rules specified

// Modern browser (chrome & safari)

// Legacy browsers

// Unix-based path

// Windows-based path

// Prioritize the local normalizer defined for this element over the global one

// if the former exists, otherwise user the global one in case it exists.

// If normalizer is defined, then call it to retreive the changed value instead

// of using the real one.

// Note that `this` in the normalizer is `element`.

// Delete the normalizer from rules to avoid treating it as a pre-defined method.

// If a method indicates that the field is optional and therefore valid,

// don't mark it as valid when there are no other rules

// Return the custom message for the given element and validation method

// specified in the element's HTML5 data attribute

// return the generic message if present and no method specific message is present

// Return the custom message for the given element name and validation method

// Return the first defined argument, allowing empty strings

// The second parameter 'rule' used to be a string, and extended to an object literal

// of the following form:

// rule = {

//     method: "method name",

//     parameters: "the given method parameters"

// }

// The old behavior still supported, kept to maintain backward compatibility with

// old code, and will be removed in the next major release.

// 'title' is never undefined, so handle empty string as undefined

// Refresh error/success class

// Replace message on existing label

// Create error element

// Maintain reference to the element to be placed into the DOM

// Make sure the element is visible, even in IE

// actually showing the wrapped element is handled elsewhere

// Link error back to the element

// If the error is a label, then associate using 'for'

// Respect existing non-error aria-describedby

// Add to end of list if not already present

// If this element is grouped, then assign to all elements in the same group

// 'aria-describedby' should directly reference the error element

// See https://api.jquery.com/category/selectors/, for CSS

// meta-characters that should be escaped in order to be used with JQuery

// as a literal part of a name/id or any selector.

// Always apply ignore filter

// If radio/checkbox, validate first element in group instead

// Sometimes synchronization fails, make sure pendingRequest is never < 0

// Remove the hidden input that was used as a replacement for the

// missing submit button. The hidden input is added by `handle()`

// to ensure that the value of the used submit button is passed on

// for scripted submits triggered by this method

// Cleans up all forms and elements, removes validator-specific events

// Convert the value to a number for number inputs, and for text for backwards compability

// allows type="date" and others to be compared as strings

// Support Opera Mini, which returns NaN for undefined minlength

// Exception: the jquery validate 'range' method

// does not test for the html5 'range' type

// Support for <input required> in both html5 and older browsers

// Some browsers return an empty string for the required attribute

// and non-HTML5 browsers might have required="" markup

// Force non-HTML5 browsers to return bool

// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs

// Cast empty attributes like `data-rule-required` to `true`

// Handle dependency check

// Ignore rule when param is explicitly false, eg. required:false

// Evaluate parameters

// Clean number parameters

// Auto-create ranges

// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}

// https://jqueryvalidation.org/jQuery.validator.addMethod/

// https://jqueryvalidation.org/jQuery.validator.methods/

// https://jqueryvalidation.org/required-method/

// Check if dependency is met

// Could be an array for select-multiple or a string, both are fine this way

// https://jqueryvalidation.org/email-method/

// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address

// Retrieved 2014-01-14

// If you have a problem with this implementation, report a bug against the above spec

// Or use custom methods to implement your own email validation

// https://jqueryvalidation.org/url-method/

// Copyright (c) 2010-2013 Diego Perini, MIT licensed

// https://gist.github.com/dperini/729294

// see also https://mathiasbynens.be/demo/url-regex

// modified to allow protocol-relative URLs

// https://jqueryvalidation.org/date-method/

// https://jqueryvalidation.org/dateISO-method/

// https://jqueryvalidation.org/number-method/

// https://jqueryvalidation.org/digits-method/

// https://jqueryvalidation.org/minlength-method/

// https://jqueryvalidation.org/maxlength-method/

// https://jqueryvalidation.org/rangelength-method/

// https://jqueryvalidation.org/min-method/

// https://jqueryvalidation.org/max-method/

// https://jqueryvalidation.org/range-method/

// https://jqueryvalidation.org/step-method/

// Number of digits right of decimal point.

// Works only for text, number and range input types

// TODO find a way to support input types date, datetime, datetime-local, month, time and week

// Value can't have too many decimals

// https://jqueryvalidation.org/equalTo-method/

// Bind to the blur event of the target in order to revalidate whenever the target field is updated

// https://jqueryvalidation.org/remote-method/

// Ajax mode: abort

// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});

// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

// Use a prefilter if available (1.5+)

// Proxy ajax

/* 316 */

/**
 * jquery.mask.js
 * @version: v1.14.16
 * @author: Igor Escobar
 *
 * Created by Igor Escobar on 2012-03-10. Please report any bug at github.com/igorescobar/jQuery-Mask-Plugin
 *
 * Copyright (c) 2012 Igor Escobar http://igorescobar.com
 *
 * The MIT License (http://www.opensource.org/licenses/mit-license.php)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/* jshint laxbreak: true */

/* jshint maxcomplexity:17 */

/* global define */

// UMD (Universal Module Definition) patterns for JavaScript modules that work everywhere.

// https://github.com/umdjs/umd/blob/master/templates/jqueryPlugin.js

// IE Support

// Firefox, WebKit, etc..

// IE

// if the cursor is at the end keep it there

// this is a compensation to devices/browsers that don't compensate

// caret positioning the right way

// matched the last untranslated (raw) mask character that we encountered

// likely an insert offset the mask character from the last entry; fall

// through and only increment v

// public methods

// get value without mask

// get masked value without the value being in the input or element

// this is necessary, otherwise if the user submit the form

// and then press the "back" button, the autocomplete will erase

// the data. Works fine on IE9+, FF, Opera, Safari.

// detect if is necessary let the user type freely.

// for is a lot faster than forEach.

// old versions of chrome dont work great with input event

// looking for inputs with data-mask attribute
